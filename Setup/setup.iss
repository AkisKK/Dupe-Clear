; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
#include <idp.iss>
#define AppVer GetFileVersion('D:\Google Drive Cache\VS Projects\Dupe Clear C#\bin\Release\dupe clear.exe')

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{4E304725-5599-43E2-A121-DA186E5ECFD2}
AppName=Dupe Clear
AppVersion=1.84
;AppVerName=Antik Duplicate File Cleaner 1.1
AppPublisher=Antik Mozib Technologies
DefaultDirName={pf}\Dupe Clear
DisableProgramGroupPage=yes
LicenseFile=D:\Google Drive Cache\Development\VS Projects\dupe clear c#\Setup\license.txt
OutputDir=D:\Google Drive Cache\Development\VS Projects\dupe clear c#\Setup\Output
OutputBaseFilename=dupeclear1.84_setup
Compression=lzma
SolidCompression=yes
DisableWelcomePage=no

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags:

[Files]
Source: "D:\Google Drive Cache\Development\VS Projects\Dupe Clear C#\bin\Release\dupe clear.exe"; DestDir: "{app}"; Flags: 
Source: "D:\Google Drive Cache\Development\VS Projects\Dupe Clear C#\bin\Release\Validator.dll"; DestDir: "{app}"; Flags: 
Source: "D:\Google Drive Cache\Development\VS Projects\Dupe Clear C#\bin\Release\Dupe Clear.exe.config"; DestDir: "{app}"; Flags: 
Source: "D:\Google Drive Cache\Development\VS Projects\Dupe Clear C#\bin\Release\ChreneLib.dll"; DestDir: "{app}"; Flags: 
Source: "D:\Google Drive Cache\Development\VS Projects\Dupe Clear C#\bin\Release\GrabFolderIcon.dll"; DestDir: "{app}"; Flags: 

; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Icons]
Name: "{commonprograms}\Dupe Clear\Dupe Clear"; Filename: "{app}\Dupe Clear.exe"; Comment: "Duplicate file cleaner"
Name: "{commonprograms}\Dupe Clear\Uninstall Dupe Clear"; Filename: "{uninstallexe}"
Name: "{commondesktop}\Dupe Clear"; Filename: "{app}\Dupe Clear.exe"; Tasks: desktopicon; Comment: "The ultimate duplicate file cleaner."

[Run]
Filename: "{app}\dupe clear.exe"; Description: "{cm:LaunchProgram,Dupe Clear}"; Flags: nowait postinstall skipifsilent

[UninstallDelete]
Type: filesandordirs; Name: "{localappdata}\Dupe Clear"

[Code]
var
	ForceClose: Boolean;
	WillInstallDotNet: TOutputMsgWizardPage; // Page which informs the user that .NET will be downloaded and installed

// Aborts the setup without displaying a confirmation msg					
procedure Exterminate;
begin
	ForceClose:= True;
	WizardForm.Close;  
end;

// Returns True is .NET isn't found
function Framework45IsNotInstalled(): Boolean;
var
	bSuccess: Boolean;
	regVersion: Cardinal;
begin
	Result := True;

	bSuccess := RegQueryDWordValue(HKLM, 'Software\Microsoft\NET Framework Setup\NDP\v4\Full', 'Release', regVersion);
	if (True = bSuccess) and (regVersion >= 379893) then  // Checks for .NET Framework 4.5.2
	begin
		Result := False;
	end;
end;

function RGB(r, g, b: Byte): TColor;
begin
  Result := (Integer(r) or (Integer(g) shl 8) or (Integer(b) shl 16));
end;

procedure InitializeWizard;
begin
	if Framework45IsNotInstalled() then
	begin
		idpAddFile('http://go.microsoft.com/fwlink/?LinkId=780596', ExpandConstant('{tmp}\NetFrameworkInstaller.exe'));
		idpDownloadAfter(wpReady);
	end;

	WillInstallDotNet := CreateOutputMsgPage(wpSelectTasks, '.NET Framework Not Found', 'Setup didn''t find the .NET Framework installed on this computer', 'This program requires the Microsoft .NET Framework 4.5.2 to run.' + #13#10 + #13#10 + 'Setup will automatically download and install the latest version of .NET Framework from the Microsoft website.');
end;

procedure InstallFramework;
var
	StatusText: string;
	ResultCode: Integer;
  ErrorText: string;
begin
	StatusText := WizardForm.StatusLabel.Caption;
	WizardForm.StatusLabel.Caption := 'Installing .NET Framework 4.6.2. This might take a few minutes...';
	WizardForm.ProgressGauge.Style := npbstMarquee;
	try
		Exec(ExpandConstant('{tmp}\NetFrameworkInstaller.exe'), '/passive /norestart', '', SW_SHOW, ewWaitUntilTerminated, ResultCode)
		if (ResultCode <> 0) and (ResultCode <> 1641) and (ResultCode <> 3010) then
    begin
      if ResultCode = 5100 then
      begin
        ErrorText := 'Your computer does not meet the system requirements.';
      end
      else if ResultCode = 1603 then
      begin
        ErrorText := 'A fatal error occurred during installation.'
      end
      else if (ResultCode = 1602) then
      begin
        ErrorText := '.NET Framework needs to be installed before Setup can continue.';
      end
      else
      begin
        ErrorText := '';
      end;

      MsgBox('.NET Framework installation failed. ' + ErrorText + #13#10 + 'Error Code: ' + IntToStr(ResultCode) + #13#10 + #13#10 + 'Setup will now abort.', mbError, MB_OK);
      DeleteFile(ExpandConstant('{tmp}\NetFrameworkInstaller.exe'));
      Exterminate;
    end
		else 
		begin
			WizardForm.StatusLabel.Caption := StatusText;
			WizardForm.ProgressGauge.Style := npbstNormal;
		end;
	finally
		DeleteFile(ExpandConstant('{tmp}\NetFrameworkInstaller.exe'));
	end;
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
	case CurStep of
		ssInstall:
		begin
			if Framework45IsNotInstalled() then
			begin
				InstallFramework();
			end;
		end;
	end;
end;

function ShouldSkipPage(PageID: Integer): Boolean;
begin
	if PageID = WillInstallDotNet.ID then
	begin
		if not Framework45IsNotInstalled() then
		begin
			result := true
		end;
	end;
end;

procedure CancelButtonClick(CurPageID: Integer; var Cancel, Confirm: Boolean);
begin
	Confirm:= not ForceClose;
end;

procedure CurPageChanged(CurPageID: Integer);
begin
  if CurPageID = wpFinished then
  begin
    WizardForm.FinishedLabel.Caption := WizardForm.FinishedLabel.Caption + #13#10 + 'Please note that this program can batch delete files. So, please be cautious and always double-check which files you''re about to delete. We cannot be held responsible for any kind of data loss. Thank you for understanding.';
    WizardForm.FinishedLabel.Height := WizardForm.FinishedLabel.Height + 60;
    WizardForm.RunList.Top := WizardForm.FinishedLabel.Top + WizardForm.FinishedLabel.Height + 10;
   end;
end;

function UpdateReadyMemo(Space, NewLine, MemoUserInfoInfo, MemoDirInfo, MemoTypeInfo,
MemoComponentsInfo, MemoGroupInfo, MemoTasksInfo: string): string;
begin
	if Framework45IsNotInstalled() then
	begin
		Result := MemoDirInfo + NewLine + NewLine + MemoTasksInfo + NewLine + Space + 'Download and install .NET Framework 4.6.2';
	end
	else
	begin
		Result := MemoDirInfo + NewLine + NewLine + MemoTasksInfo
	end;
end;